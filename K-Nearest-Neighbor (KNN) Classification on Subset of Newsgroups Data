{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## K-Nearest-Neighbor (KNN) Classification on Subset of Newsgroups Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Set Information\n",
    "For this problem I will use a subset of the 20 Newsgroup data set taken from http://mlg.ucd.ie/content/view/22/. The original full data set contains 20,000 newsgroup documents, partitioned (nearly) evenly across 20 different newsgroups and has been often used for experiments in text applications of machine learning techniques, such as text classification and text clustering. \n",
    "\n",
    "The data set for this problem contains a subset of 1000 documents and a vocabulary of  terms. Each document belongs to one of two classes Hockey (class label 1) and Microsoft Windows (class label 0). The data has already been split (80%, 20%) into training and test data. The class labels for the training and test data are also provided in separate files. The training and test data contain a row for each term in the vocabulary and a column for each document. The values in the table represent raw term frequencies. The data has already been preprocessed to extract terms, remove stop words and perform stemming (so, the vocabulary contains stems not full terms)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### File Information\n",
    "The files contained in the archive file are as follows:\n",
    "\n",
    "1. trainMatrixModified.txt: the term-document frequency matrix for the training documents. Each row of this matrix corresponds to one of the terms and each column corresponds to one the documents and the (i,j)th element of the matrix shows the frequency of the ith term in the jth document. This matrix contains 5500 rows and 800 columns.\n",
    "\n",
    "2. testMatrixModified.txt: the term-document frequency for the test documents. The matrix contains 5500 rows and 200 columns.\n",
    "\n",
    "3. trainClasses.txt: This file contains the labels associated with each training document. Each line is in the format of documentIndex \\t classId where the documentIndex is in the range of [0,800) and refers to the index of the document in the term-document frequency matrix for train documents. The classId refers to one of the two classes and takes one of the values 0 (for Windows) or 1 (for Hockey).\n",
    "\n",
    "4. testClasses.txt: This file contains the labels associated with each test document. Each line is in the format of documentIndex \\t classId where the documentIndex is in the range of [0,200) and refers to the index of the document in the term-document frequency matrix for test documents  \n",
    "\n",
    "5. modifiedterms.txt: This file contains the set of 5500 terms in the vocabulary. Each line contains a term and corresponds to the corresponding rows in term-document frequency matrices. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A. Create your own KNN classifier function. The classifier should allow as input the training data matrix, the training labels, the instance to be classified, the value of K, and should return the predicted class for the instance and the top K neighbors. Your classifier should work with Euclidean distance as well as Cosine Similarity. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def K_classifier (x,train,train_labels,k,m):\n",
    "    import operator\n",
    "    if m == \"Euclidean\":\n",
    "        dist=np.sum(((train-x)**2), axis=1)\n",
    "        dist=np.sqrt(dist)\n",
    "    elif m == \"Cosine\":\n",
    "        norm_x=np.linalg.norm(x)\n",
    "        norm_t=np.array([np.linalg.norm(train[i]) for i in range(len(train))])\n",
    "        sim=np.dot(train,x)/(norm_x*norm_t)\n",
    "        dist=1-sim\n",
    "    index=np.argsort(dist)[:k]\n",
    "    label=[train_labels[ind] for ind in index] \n",
    "    dictL={}\n",
    "    dictL[0]=label.count(0)\n",
    "    dictL[1]=label.count(1)\n",
    "    label=sorted(dictL.items(),key=operator.itemgetter(1))[1][0]\n",
    "    return index,label"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### B. Create a function to compute the classification accuracy over the test data set. This function will call the classifier function in A on all the test instances and in each case compares the actual test class label to the predicted class label."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def validation(test,test_labels,train,train_labels,k,m):\n",
    "    predictedL=[]\n",
    "    for t in test:\n",
    "        index, label=K_classifier(t,train,train_labels,k,m)\n",
    "        predictedL.append(label)\n",
    "    \n",
    "    TestL=[t_labels[0] for t_labels in test_labels]\n",
    "    correct=len([(i,j) for i,j in zip(predictedL,TestL) if i==j])\n",
    "    \n",
    "    accuracy= float(correct) / float(len(test_labels))\n",
    "    return round(accuracy,2)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### C. Run the accuracy function on a range of values for K in order to compare accuracy values for different numbers of neighbors. Do this both using Euclidean Distance as well as Cosine similarity measure. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_dt=pd.read_csv(\"C:/Users/Rai Chiang/Desktop/DePaul Course/CSC478 data/assignment2/trainMatrixModified.txt\",delimiter=\"\\t\",header=None).T\n",
    "train_dt=np.array(train_dt)\n",
    "\n",
    "test_dt=pd.read_csv(\"C:/Users/Rai Chiang/Desktop/DePaul Course/CSC478 data/assignment2/testMatrixModified.txt\",delimiter=\"\\t\",header=None).T\n",
    "test_dt=np.array(test_dt)\n",
    "\n",
    "train_class=pd.read_csv(\"C:/Users/Rai Chiang/Desktop/DePaul Course/CSC478 data/assignment2/trainClasses.txt\",delimiter=\"\\t\",header=None).iloc[:,1:]\n",
    "train_class=np.array(train_class)\n",
    "\n",
    "test_class=pd.read_csv(\"C:/Users/Rai Chiang/Desktop/DePaul Course/CSC478 data/assignment2/testClasses.txt\",delimiter=\"\\t\",header=None).iloc[:,1:]\n",
    "test_class=np.array(test_class)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def loop(m):\n",
    "    dicA={}\n",
    "    if m==\"Euclidean\":\n",
    "        for i in range(1,21,2):\n",
    "            dicA[i]=validation(test_dt,test_class,train_dt,train_class,i,\"Euclidean\")\n",
    "        table=pd.DataFrame(dicA.items(),columns=[\"k\",\"accuracy\"])\n",
    "        table.set_index('k', inplace=True)\n",
    "        plot=plt.plot(table)\n",
    "        return table,plot\n",
    "    elif m==\"Cosine\":\n",
    "        for i in range(1,21,2):\n",
    "            dicA[i]=validation(test_dt,test_class,train_dt,train_class,i,\"Cosine\")\n",
    "        table=pd.DataFrame(dicA.items(),columns=[\"k\",\"accuracy\"])\n",
    "        table.set_index('k', inplace=True)\n",
    "        plot=plt.plot(table)\n",
    "        return table,plot\n",
    "               "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(    accuracy\n",
       " k           \n",
       " 1       0.78\n",
       " 3       0.81\n",
       " 5       0.81\n",
       " 7       0.77\n",
       " 9       0.75\n",
       " 11      0.80\n",
       " 13      0.78\n",
       " 15      0.79\n",
       " 17      0.76\n",
       " 19      0.74, [<matplotlib.lines.Line2D at 0x9d24550>])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#To avoid tide votes, I choose the odd number for K values\n",
    "loop(\"Euclidean\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(    accuracy\n",
       " k           \n",
       " 1       0.98\n",
       " 3       0.97\n",
       " 5       0.97\n",
       " 7       0.98\n",
       " 9       0.97\n",
       " 11      0.98\n",
       " 13      0.98\n",
       " 15      0.98\n",
       " 17      0.97\n",
       " 19      0.97, [<matplotlib.lines.Line2D at 0xe0e6898>])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "loop(\"Cosine\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### D. Using Python, modify the training and test data sets so that term weights are converted to TFxIDF weights (instead of raw term frequencies).Then, rerun the evaluation on the range of K values (as above) and compare the results to the results without using TFxIDF weights.\n",
    "\n",
    "------------------------------------------------\n",
    "According to the experiment results below,the knn clssifier based on Euclidean distance has close range of accuracy from k=1 to 19 whether applying tfidf weight or not. On the other hand, the classifier based on Cosine similaruty has significant difference on the accuracy for k=1 through k=19  when applying the tfidf weight. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "train_td = train_dt.T\n",
    "term = train_td.shape[0]\n",
    "train_dnum = train_td.shape[1]\n",
    "train_df = np.array([(train_td!=0).sum(axis=1)]).T #remember to conver the df into 2d by np.array and transpose for the diversion \n",
    "train_matrix = np.ones(np.shape(train_td),dtype=float)*train_dnum\n",
    "train_idf = np.log2(np.divide(train_matrix,train_df))\n",
    "train_tfidf_td = train_td*train_idf\n",
    "train_tfidf_dt=train_tfidf_td.T #remember to transpose in dt formate for the knn classifier\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def validation_tfidf(test,test_labels,k,m):\n",
    "    predictedL=[]\n",
    "    for t in test:\n",
    "        t=t*train_idf.T[0] # always use the train set weight to for test set\n",
    "        index, label=K_classifier(t,train_tfidf_dt,train_class,k,m)\n",
    "        predictedL.append(label)\n",
    "    \n",
    "    TestL=[t_labels[0] for t_labels in test_labels]\n",
    "    correct=len([(i,j) for i,j in zip(predictedL,TestL) if i==j])\n",
    "    \n",
    "    accuracy= float(correct) / float(len(test_labels))\n",
    "    return accuracy\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def loop_tfidf(m):\n",
    "    dicA={}\n",
    "    if m==\"Euclidean\":\n",
    "        for i in range(1,21,2):\n",
    "            dicA[i]=validation_tfidf(test_dt,test_class,i,\"Euclidean\")\n",
    "        table=pd.DataFrame(dicA.items(),columns=[\"k\",\"accuracy\"])\n",
    "        table.set_index('k', inplace=True)\n",
    "        plot=plt.plot(table)\n",
    "        return table,plot\n",
    "    elif m==\"Cosine\":\n",
    "        for i in range(1,21,2):\n",
    "            dicA[i]=validation_tfidf(test_dt,test_class,i,\"Cosine\")\n",
    "        table=pd.DataFrame(dicA.items(),columns=[\"k\",\"accuracy\"])\n",
    "        table.set_index('k', inplace=True)\n",
    "        plot=plt.plot(table)\n",
    "        return table,plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(    accuracy\n",
       " k           \n",
       " 1      0.710\n",
       " 3      0.750\n",
       " 5      0.800\n",
       " 7      0.730\n",
       " 9      0.680\n",
       " 11     0.680\n",
       " 13     0.650\n",
       " 15     0.620\n",
       " 17     0.615\n",
       " 19     0.630, [<matplotlib.lines.Line2D at 0xa074048>])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "loop_tfidf(\"Euclidean\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(    accuracy\n",
       " k           \n",
       " 1      0.945\n",
       " 3      0.980\n",
       " 5      0.980\n",
       " 7      0.985\n",
       " 9      0.990\n",
       " 11     0.990\n",
       " 13     0.990\n",
       " 15     0.990\n",
       " 17     0.990\n",
       " 19     0.995, [<matplotlib.lines.Line2D at 0xe64e9e8>])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "loop_tfidf(\"Cosine\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### E. Create a new classifier based on the Rocchio Method adapted for text categorization.\n",
    "\n",
    "1.Separate the training function from the classifiation function. The training part for the classifier is implemented as a function that takes as input the training data matrix and the training labels, returning the prototype vectors for each class. \n",
    "\n",
    "2.The classification part is implemented as another function that would take as input the prototypes returned from the training function and the instance to be classified. This function should measure Cosine similarity of the test instance to each prototype vector. The output indicates the predicted class for the test instance and the similarity values of the instance to each of the category prototypes. \n",
    "\n",
    "3.Finally, compute the classification accuracy using the test instances and compare your results to the best KNN approach you tried earlier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#training fuction\n",
    "def create_prototype(train_data,train_labels):\n",
    "    class_0_index=np.where(train_labels == 0)[0] #return an array of index\n",
    "    class_1_index=np.where(train_labels == 1)[0]\n",
    "    proto_0=np.sum(train_data[class_0_index],axis=0)\n",
    "    proto_1=np.sum(train_data[class_1_index],axis=0)\n",
    "    return np.array([proto_0]), np.array([proto_1])\n",
    "\n",
    "#classification function\n",
    "def classifier_RM(proto0,proto1,test_data,test_labels):\n",
    "    predict=[]\n",
    "    pdict={}\n",
    "    for x in test_data:\n",
    "        x=x*train_idf.T[0] #each instance*tfidf weight\n",
    "        norm_x=np.linalg.norm(x)\n",
    "        norm_p0=np.linalg.norm(proto0)\n",
    "        norm_p1=np.linalg.norm(proto1)\n",
    "        proto1=proto1.reshape(-1) #to multiply x make sure its 1d array\n",
    "        proto0=proto0.reshape(-1)\n",
    "        sim0=np.dot(x,proto0)/(norm_x*norm_p0)\n",
    "        sim1=np.dot(x,proto1)/(norm_x*norm_p1)\n",
    "        sim=max(sim0,sim1)\n",
    "        if sim==sim0:\n",
    "            predict_class=0\n",
    "            pdict[sim]=predict_class\n",
    "            \n",
    "        else:\n",
    "            predict_class=1\n",
    "            pdict[sim]=predict_class\n",
    "            \n",
    "        predict.append(predict_class)\n",
    "    \n",
    "    \n",
    "    table=pd.DataFrame(pdict.items(),index=None,columns=[\"Similarity Value\",\"predicted class\"])\n",
    "    Test=[t_labels[0] for t_labels in test_labels]\n",
    "    correct=len([(i,j) for i,j in zip(predict,Test) if i==j])\n",
    "    accuracy= float(correct) / float(len(test_labels))\n",
    "    print \"Classification Accuracy= %0.2f \\n\"%(accuracy)    \n",
    "    print table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "prtotype vector1= [[57.  4.  5. ...  1.  2.  2.]]\n",
      "prtotype vector2= [[45.  7. 17. ...  1.  0.  0.]]\n"
     ]
    }
   ],
   "source": [
    "prototype0,prototype1=create_prototype(train_dt,train_class)\n",
    "print \"prtotype vector1=\", prototype0\n",
    "print \"prtotype vector2=\",prototype1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Accuracy= 0.97 \n",
      "\n",
      "     Similarity Value  predicted class\n",
      "0            0.137832                1\n",
      "1            0.081956                1\n",
      "2            0.136454                0\n",
      "3            0.084276                0\n",
      "4            0.130923                1\n",
      "5            0.104997                1\n",
      "6            0.332109                1\n",
      "7            0.069079                0\n",
      "8            0.069452                1\n",
      "9            0.120466                0\n",
      "10           0.063900                1\n",
      "11           0.151746                0\n",
      "12           0.144927                1\n",
      "13           0.080613                1\n",
      "14           0.126690                1\n",
      "15           0.129401                0\n",
      "16           0.098382                0\n",
      "17           0.131696                1\n",
      "18           0.197162                0\n",
      "19           0.103765                0\n",
      "20           0.111174                1\n",
      "21           0.080018                0\n",
      "22           0.186290                0\n",
      "23           0.129771                1\n",
      "24           0.066368                1\n",
      "25           0.155075                1\n",
      "26           0.049279                1\n",
      "27           0.169447                0\n",
      "28           0.065832                0\n",
      "29           0.103475                0\n",
      "..                ...              ...\n",
      "170          0.222192                1\n",
      "171          0.073103                1\n",
      "172          0.132043                1\n",
      "173          0.054060                1\n",
      "174          0.110292                1\n",
      "175          0.087703                0\n",
      "176          0.254255                1\n",
      "177          0.184662                0\n",
      "178          0.075501                1\n",
      "179          0.148169                1\n",
      "180          0.217828                1\n",
      "181          0.177487                1\n",
      "182          0.097885                0\n",
      "183          0.292526                1\n",
      "184          0.253770                0\n",
      "185          0.277741                0\n",
      "186          0.253572                1\n",
      "187          0.195812                1\n",
      "188          0.132356                1\n",
      "189          0.110904                1\n",
      "190          0.100353                0\n",
      "191          0.144997                1\n",
      "192          0.086653                1\n",
      "193          0.136208                0\n",
      "194          0.098852                1\n",
      "195          0.172530                0\n",
      "196          0.096135                1\n",
      "197          0.133566                0\n",
      "198          0.077178                0\n",
      "199          0.198398                0\n",
      "\n",
      "[200 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "classifier_RM(prototype0,prototype1,test_dt,test_class)\n",
    "#Note that the index is corresponed to the test set index"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:py27]",
   "language": "python",
   "name": "conda-env-py27-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
